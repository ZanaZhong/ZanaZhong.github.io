<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hey I am Zana</title>
  
  
  <link href="https://zanazhong.github.io/atom.xml" rel="self"/>
  
  <link href="https://zanazhong.github.io/"/>
  <updated>2025-01-21T15:34:01.927Z</updated>
  <id>https://zanazhong.github.io/</id>
  
  <author>
    <name>Zana</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker Compose：輕鬆管理多個容器</title>
    <link href="https://zanazhong.github.io/2025/01/21/Docker-Compose%EF%BC%9A%E8%BC%95%E9%AC%86%E7%AE%A1%E7%90%86%E5%A4%9A%E5%80%8B%E5%AE%B9%E5%99%A8/"/>
    <id>https://zanazhong.github.io/2025/01/21/Docker-Compose%EF%BC%9A%E8%BC%95%E9%AC%86%E7%AE%A1%E7%90%86%E5%A4%9A%E5%80%8B%E5%AE%B9%E5%99%A8/</id>
    <published>2025-01-21T15:32:58.000Z</published>
    <updated>2025-01-21T15:34:01.927Z</updated>
    
    <content type="html"><![CDATA[<p>在現代應用開發中，微服務架構已成為主流，而 Docker 提供了優秀的 Containerlize 解決方案。但當需要同時管理多個 Container 時，手動啟動與配置每個 Container 可能得繁瑣，這時候 Docker Compose 就派上用場。本文將介紹 Docker Compose 的基本概念、使用方式以及實際應用場景，幫助您快速掌握這項工具。</p><span id="more"></span><h2 id="什麼是-Docker-Compose？"><a href="#什麼是-Docker-Compose？" class="headerlink" title="什麼是 Docker Compose？"></a>什麼是 Docker Compose？</h2><p>Docker Compose 是一個用來定義和管理多個 Docker Container 的工具。透過編寫 <code>docker-compose.yml</code> 檔案，可以使用簡單的命令來同時啟動、停止和協調多個 Container，讓應用程式各組件能夠順暢的一同運作。</p><h3 id="優勢"><a href="#優勢" class="headerlink" title="優勢"></a>優勢</h3><ul><li><strong>簡化多個 Container 管理</strong>：使用 YAML 文件一次性定義所有 Container ，省去繁瑣的指令操作。</li><li><strong>環境一致性</strong>：確保開發、測試、部署環境一致。</li><li><strong>自動化服務啟動</strong>：設定依賴關係，按順序啟動 Container 。</li><li><strong>支援擴展性</strong>：輕鬆擴展或縮小 Container 數量，適應不同需求。</li></ul><h2 id="基本架構"><a href="#基本架構" class="headerlink" title="基本架構"></a>基本架構</h2><p><code>docker-compose.yml</code> 文件包含以下幾個部分：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./html:/usr/share/nginx/html</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">example</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>version</code>: 指定 Compose 文件的版本。</li><li><code>services</code>: 定義應用服務，EX: <code>web</code>（NGINX）與 <code>db</code>（MySQL）。</li><li><code>image</code>: 指定使用的 Docker image。</li><li><code>ports</code>: 將容器內部 Port 映射到主機。</li><li><code>volumes</code>: 掛載主機目錄到容器內。</li><li><code>environment</code>: 設置環境變數，例如 MySQL 的 root 密碼。</li></ul><h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><blockquote><p>啟動與管理容器</p></blockquote><table><thead><tr><th>指令</th><th>功能說明</th></tr></thead><tbody><tr><td><code>docker-compose up</code></td><td>啟動所有服務</td></tr><tr><td><code>docker-compose up -d</code></td><td>以背景模式運行容器</td></tr><tr><td><code>docker-compose down</code></td><td>停止並移除所有容器</td></tr><tr><td><code>docker-compose ps</code></td><td>查看運行中容器的狀態</td></tr><tr><td><code>docker-compose logs</code></td><td>查看容器日誌</td></tr><tr><td><code>docker-compose restart</code></td><td>重新啟動服務</td></tr><tr><td><code>docker-compose build</code></td><td>建立 image 檔，通常用於自定義 Dockerfile</td></tr></tbody></table><h2 id="使用範例"><a href="#使用範例" class="headerlink" title="使用範例"></a>使用範例</h2><h3 id="範例：簡單的-LAMP-環境（Linux-Apache-MySQL-PHP）"><a href="#範例：簡單的-LAMP-環境（Linux-Apache-MySQL-PHP）" class="headerlink" title="範例：簡單的 LAMP 環境（Linux + Apache + MySQL + PHP）"></a>範例：簡單的 LAMP 環境（Linux + Apache + MySQL + PHP）</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">apache:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">httpd:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./www:/usr/local/apache2/htdocs/</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">rootpass</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">  <span class="attr">php:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">php:7.4-apache</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./www:/var/www/html/</span></span><br></pre></td></tr></table></figure><p>啟動該應用環境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>瀏覽 <code>http://localhost:8080</code>，即可看到運行的網站。</p><h2 id="應用場景"><a href="#應用場景" class="headerlink" title="應用場景"></a>應用場景</h2><p>Docker Compose 適合以下情境：</p><ul><li><strong>開發與測試環境搭建</strong>：快速啟動所需服務（EX: 資料庫、快取、API）。</li><li><strong>CI&#x2F;CD 自動化測試</strong>：在 CI&#x2F;CD 流水線中管理多個微服務。</li><li><strong>本機模擬雲端架構</strong>：模擬實際部署環境，提升開發一致性。</li></ul><h2 id="進階功能介紹"><a href="#進階功能介紹" class="headerlink" title="進階功能介紹"></a>進階功能介紹</h2><h3 id="多環境配置"><a href="#多環境配置" class="headerlink" title="多環境配置"></a>多環境配置</h3><p>可以使用多個 Compose 文件來管理不同的環境，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f docker-compose.dev.yml up</span><br></pre></td></tr></table></figure><h3 id="擴展與縮放"><a href="#擴展與縮放" class="headerlink" title="擴展與縮放"></a>擴展與縮放</h3><p>使用以下指令快速擴展服務數量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up --scale web=3</span><br></pre></td></tr></table></figure><h2 id="常見問題與除錯"><a href="#常見問題與除錯" class="headerlink" title="常見問題與除錯"></a>常見問題與除錯</h2><h3 id="Container-啟動失敗"><a href="#Container-啟動失敗" class="headerlink" title="Container 啟動失敗"></a>Container 啟動失敗</h3><ul><li>檢查 <code>docker-compose logs</code> 取得詳細錯誤資訊。</li><li>確保 YAML 文件格式正確，避免縮排錯誤。</li></ul><h3 id="Port-衝突"><a href="#Port-衝突" class="headerlink" title="Port 衝突"></a>Port 衝突</h3><ul><li>確保主機 Port 未被其他應用佔用，或修改 <code>ports</code> 設定。</li></ul><h3 id="無法連接容器間服務"><a href="#無法連接容器間服務" class="headerlink" title="無法連接容器間服務"></a>無法連接容器間服務</h3><ul><li>使用服務名稱而非 IP，例如 <code>db</code> 連接 <code>mysql</code> 而非 <code>localhost</code>。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;在現代應用開發中，微服務架構已成為主流，而 Docker 提供了優秀的 Containerlize 解決方案。但當需要同時管理多個 Container 時，手動啟動與配置每個 Container 可能得繁瑣，這時候 Docker Compose 就派上用場。本文將介紹 Docker Compose 的基本概念、使用方式以及實際應用場景，幫助您快速掌握這項工具。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Docker" scheme="https://zanazhong.github.io/tags/Docker/"/>
    
    <category term="DockerCompose" scheme="https://zanazhong.github.io/tags/DockerCompose/"/>
    
    <category term="容器化" scheme="https://zanazhong.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    <category term="微服務" scheme="https://zanazhong.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8B%99/"/>
    
    <category term="DevOps" scheme="https://zanazhong.github.io/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>深入解析：列式資料（Column-Oriented）與鍵值資料（Key-Value）</title>
    <link href="https://zanazhong.github.io/2025/01/20/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90%EF%BC%9A%E5%88%97%E5%BC%8F%E8%B3%87%E6%96%99%EF%BC%88Column-Oriented%EF%BC%89%E8%88%87%E9%8D%B5%E5%80%BC%E8%B3%87%E6%96%99%EF%BC%88Key-Value%EF%BC%89/"/>
    <id>https://zanazhong.github.io/2025/01/20/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90%EF%BC%9A%E5%88%97%E5%BC%8F%E8%B3%87%E6%96%99%EF%BC%88Column-Oriented%EF%BC%89%E8%88%87%E9%8D%B5%E5%80%BC%E8%B3%87%E6%96%99%EF%BC%88Key-Value%EF%BC%89/</id>
    <published>2025-01-20T14:20:02.000Z</published>
    <updated>2025-01-21T07:16:46.368Z</updated>
    
    <content type="html"><![CDATA[<p>在現代應用程式開發中，選擇合適的資料庫類型對於系統效能與可擴展性非常重要。許多人常將列式資料 (Column-Oriented) 與鍵值資料 (Key-Value) 混淆，本文將介紹這兩種存儲方式的概念、優缺點與適用場景，幫助讀者更好地理解並選擇合適的解決方案。</p><span id="more"></span><h2 id="列式資料-Column-Oriented"><a href="#列式資料-Column-Oriented" class="headerlink" title="列式資料 (Column-Oriented)"></a>列式資料 (Column-Oriented)</h2><blockquote><p>列式資料庫是指資料以「列」為單位進行存儲，而非傳統的按「行」存儲方式。它專為需要對特定欄位進行高效的篩選、聚合和分析的應用而設計，適合<strong>大規模</strong>資料分析場景。</p></blockquote><h2 id="儲存方式範例"><a href="#儲存方式範例" class="headerlink" title="儲存方式範例"></a>儲存方式範例</h2><p>假設有一張用戶資料表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ID   | Name   | Age</span><br><span class="line">--------------------</span><br><span class="line">1    | Alice  | 25</span><br><span class="line">2    | Bob    | 30</span><br></pre></td></tr></table></figure><p>在列式存儲中，數據會這樣存儲：</p><ul><li>列1 (ID): <code>[1, 2]</code></li><li>列2 (Name): <code>[Alice, Bob]</code></li><li>列3 (Age): <code>[25, 30]</code></li></ul><p>這樣的結構使得對某一列的篩選與聚合操作非常高效。</p><h2 id="優勢"><a href="#優勢" class="headerlink" title="優勢"></a>優勢</h2><ul><li><strong>高效查詢特定列</strong>：只需讀取相關的列，避免不必要的資料讀取。</li><li><strong>良好的壓縮率</strong>：同類型資料集中存放，壓縮率高，節省儲存空間。</li><li>**適合分析型查詢 (OLAP)**：如統計、報表生成等。</li></ul><h2 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h2><ul><li><strong>寫入效能較低</strong>：因為數據需分別寫入多個列，插入性能不如行式存儲。</li><li><strong>不適合頻繁的更新和刪除</strong>：需要重新整理數據結構。</li></ul><h2 id="適用場景"><a href="#適用場景" class="headerlink" title="適用場景"></a>適用場景</h2><ul><li>資料倉儲系統 (EX: ClickHouse、Apache HBase、Apache Cassandra)</li><li>需要頻繁聚合與分析的應用 (EX: BI 報表、即時分析)</li></ul><h2 id="鍵值資料-Key-Value"><a href="#鍵值資料-Key-Value" class="headerlink" title="鍵值資料 (Key-Value)"></a>鍵值資料 (Key-Value)</h2><blockquote><p>鍵值資料庫是一種非關聯式資料庫，將數據存儲為「鍵-值」對的形式。它提供快速查找與讀取操作，特別適合於需要低延遲 &amp; 高吞吐的應用場景。</p></blockquote><h2 id="儲存方式範例-1"><a href="#儲存方式範例-1" class="headerlink" title="儲存方式範例"></a>儲存方式範例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Key: user1 -&gt; Value: &#123;&quot;ID&quot;: 1, &quot;Name&quot;: &quot;Alice&quot;, &quot;Age&quot;: 25&#125;</span><br><span class="line">Key: user2 -&gt; Value: &#123;&quot;ID&quot;: 2, &quot;Name&quot;: &quot;Bob&quot;, &quot;Age&quot;: 30&#125;</span><br></pre></td></tr></table></figure><p>在鍵值存儲中，資料以獨立的鍵值對方式存放，並透過鍵快速檢索整個值。</p><h2 id="優勢-1"><a href="#優勢-1" class="headerlink" title="優勢"></a>優勢</h2><ul><li><strong>查詢速度極快</strong>：透過鍵直接定位數據，查找效率高。</li><li><strong>高擴展性</strong>：可以水平擴展，適合分佈式架構。</li><li><strong>靈活的資料結構</strong>：支援 JSON、XML 等非結構化資料存儲。</li></ul><h2 id="缺點-1"><a href="#缺點-1" class="headerlink" title="缺點"></a>缺點</h2><ul><li><strong>無法針對 Value 進行篩選</strong>：只能根據 Key 來存取數據，++無法輕易查詢值中的具體欄位++。</li><li><strong>數據關聯性弱</strong>：不適合有強關聯性的應用，EX: 關聯式數據查詢。</li></ul><h2 id="適用場景-1"><a href="#適用場景-1" class="headerlink" title="適用場景"></a>適用場景</h2><ul><li>快取系統 (EX: Redis、Memcached)</li><li>會話管理、使用者偏好設定…等場景</li><li>物聯網 IoT 應用，存取大量即時資料</li></ul><h2 id="比較"><a href="#比較" class="headerlink" title="比較"></a>比較</h2><table><thead><tr><th>比較項目</th><th>列式資料 (Column-Oriented)</th><th>鍵值資料 (Key-Value)</th></tr></thead><tbody><tr><td>儲存方式</td><td>按列存儲，數據高度結構化</td><td>鍵對應值，值可以是非結構化數據</td></tr><tr><td>查詢效能</td><td>適合讀取單一或少數欄位，高效進行聚合和統計</td><td>適合快速查找單個鍵的整體數據</td></tr><tr><td>讀取效率</td><td>需要讀取列，對整體行查詢速度較慢</td><td>直接根據鍵讀取，速度極快</td></tr><tr><td>寫入效能</td><td>較慢，因為數據需分列存儲</td><td>快速寫入，不需特別拆解數據</td></tr><tr><td>應用場景</td><td>數據分析、報表生成、資料倉儲等</td><td>快取、用戶會話管理、分散式系統</td></tr><tr><td>常見技術</td><td>Apache Cassandra、ClickHouse、HBase</td><td>Redis、Memcached、DynamoDB</td></tr></tbody></table><h2 id="如何選擇合適的資料庫？"><a href="#如何選擇合適的資料庫？" class="headerlink" title="如何選擇合適的資料庫？"></a>如何選擇合適的資料庫？</h2><p>在選擇資料庫時，可以根據以下幾點考慮：</p><ul><li><strong>需要快速存取特定數據時</strong> → 選擇鍵值資料庫，EX: Redis。</li><li><strong>需要處理大規模的數據分析時</strong> → 選擇列式資料庫，EX: Apache Cassandra。</li><li><strong>需要處理高頻讀取但低頻寫入的場景</strong> → 列式資料庫較適合。</li><li><strong>需要高效寫入與查詢整體數據時</strong> → 鍵值資料庫是最佳選擇。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;在現代應用程式開發中，選擇合適的資料庫類型對於系統效能與可擴展性非常重要。許多人常將列式資料 (Column-Oriented) 與鍵值資料 (Key-Value) 混淆，本文將介紹這兩種存儲方式的概念、優缺點與適用場景，幫助讀者更好地理解並選擇合適的解決方案。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Database" scheme="https://zanazhong.github.io/tags/Database/"/>
    
    <category term="SQL" scheme="https://zanazhong.github.io/tags/SQL/"/>
    
    <category term="NoSQL" scheme="https://zanazhong.github.io/tags/NoSQL/"/>
    
    <category term="資料庫" scheme="https://zanazhong.github.io/tags/%E8%B3%87%E6%96%99%E5%BA%AB/"/>
    
    <category term="列式資料" scheme="https://zanazhong.github.io/tags/%E5%88%97%E5%BC%8F%E8%B3%87%E6%96%99/"/>
    
    <category term="鍵值資料" scheme="https://zanazhong.github.io/tags/%E9%8D%B5%E5%80%BC%E8%B3%87%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>SQL 與 NoSQL：關聯式與非關聯式資料庫的差異與應用</title>
    <link href="https://zanazhong.github.io/2025/01/18/SQL-%E8%88%87-NoSQL%EF%BC%9A%E9%97%9C%E8%81%AF%E5%BC%8F%E8%88%87%E9%9D%9E%E9%97%9C%E8%81%AF%E5%BC%8F%E8%B3%87%E6%96%99%E5%BA%AB%E7%9A%84%E5%B7%AE%E7%95%B0%E8%88%87%E6%87%89%E7%94%A8/"/>
    <id>https://zanazhong.github.io/2025/01/18/SQL-%E8%88%87-NoSQL%EF%BC%9A%E9%97%9C%E8%81%AF%E5%BC%8F%E8%88%87%E9%9D%9E%E9%97%9C%E8%81%AF%E5%BC%8F%E8%B3%87%E6%96%99%E5%BA%AB%E7%9A%84%E5%B7%AE%E7%95%B0%E8%88%87%E6%87%89%E7%94%A8/</id>
    <published>2025-01-18T12:52:41.000Z</published>
    <updated>2025-01-18T14:35:00.321Z</updated>
    
    <content type="html"><![CDATA[<h3 id="資料的儲存與未來的選擇"><a href="#資料的儲存與未來的選擇" class="headerlink" title="資料的儲存與未來的選擇"></a>資料的儲存與未來的選擇</h3><p>現今的應用程式需要處理大量的資料，而選擇適合的資料庫相當的重要。無論是需要處理<code>結構化資料</code>，還是<code>非結構化</code>或<code>半結構化</code>資料，我們通常面臨著兩種主要資料庫技術的選擇：<strong>關聯式資料庫 (SQL)</strong> 和 <strong>非關聯式資料庫 (NoSQL)</strong> 。</p><p>本篇教學將以簡單明瞭的方式介紹這兩種資料庫的核心概念、結構、適用情境以及它們之間的比較，幫助你快速掌握其特性，並做出正確的選擇。</p><span id="more"></span><h2 id="什麼是-SQL-和-NoSQL？"><a href="#什麼是-SQL-和-NoSQL？" class="headerlink" title="什麼是 SQL 和 NoSQL？"></a>什麼是 SQL 和 NoSQL？</h2><table><thead><tr><th><strong>分類</strong></th><th><strong>SQL (關聯式資料庫)</strong></th><th><strong>NoSQL (非關聯式資料庫)</strong></th></tr></thead><tbody><tr><td><strong>定義</strong></td><td>使用結構化查詢語言 (Structured Query Language)進行操作的關聯式資料庫</td><td>不使用固定結構的表格，支持非結構化或半結構化資料的資料庫。</td></tr><tr><td><strong>資料結構</strong></td><td>嚴格的表格結構 (行與列)，所有資料存儲於表格中，表格之間透過關聯來連結</td><td>多種資料模型 (鍵值、文件、圖形、列式)，沒有固定結構，靈活性高</td></tr><tr><td><strong>儲存方式</strong></td><td>表格型資料 (Table-based)</td><td>文件、鍵值對 (Key-Value)、圖形、文件、列式 (Column-Oriented) 資料等多種儲存格式</td></tr><tr><td><strong>一致性模型</strong></td><td>強一致性 (ACID：原子性、一致性、隔離性、持久性)</td><td>最終一致性 (BASE：基本可用、軟狀態、最終一致性)，但可根據需求提供強一致性</td></tr></tbody></table><h2 id="SQL-關聯式資料庫"><a href="#SQL-關聯式資料庫" class="headerlink" title="SQL (關聯式資料庫)"></a>SQL (關聯式資料庫)</h2><ul><li><p><strong>結構化與模式化</strong></p><ul><li>資料存儲在行和列的表格中，表格具有嚴格的結構 (Schema)。</li><li>資料需要事先設計表格結構 (如欄位名稱和資料類型)。</li></ul></li><li><p><strong>支援複雜查詢</strong></p><ul><li>使用 SQL 語言執行強大的查詢與資料操作 (EX: SELECT、JOIN、GROUP BY)。</li><li>非常適合需要跨多個表格進行關聯性查詢的情境。</li></ul></li><li><p><strong>交易支持</strong></p><ul><li>遵循 <strong>ACID 特性</strong>，確保資料在交易過程中始終一致與完整。</li><li>適合金融、銀行、電商等需要高一致性的應用。</li></ul></li></ul><div class="note info"><p><strong>MySQL</strong>、<strong>PostgreSQL</strong>、<strong>Microsoft SQL Server</strong>、<strong>Oracle Database</strong></p></div><h2 id="NoSQL-非關聯式資料庫"><a href="#NoSQL-非關聯式資料庫" class="headerlink" title="NoSQL (非關聯式資料庫)"></a>NoSQL (非關聯式資料庫)</h2><ul><li><p><strong>靈活的資料結構</strong></p><ul><li>支援多種資料模型：<ul><li><strong>鍵值對模型</strong> (EX: Redis)：用於快速存取資料。</li><li><strong>文件模型</strong> (EX: MongoDB)：儲存 JSON 格式的文件資料。</li><li><strong>圖形模型</strong> (EX: Neo4j)：用於儲存節點和關係的資料。</li><li><strong>列式模型</strong> (EX: Cassandra)：適合大規模分布式運算。</li></ul></li></ul></li><li><p><strong>高可擴展性</strong></p><ul><li>透過分片 (Sharding)和分布式架構，能處理大量資料和高併發需求。</li><li>適合大規模應用程式 (如社交媒體、物聯網)。</li></ul></li><li><p><strong>靈活性與高性能</strong></p><ul><li>資料結構靈活，適合處理快速變化的需求。</li><li>可根據需求選擇一致性 (強一致性或最終一致性)。</li></ul></li></ul><div class="note info"><p><strong>MongoDB</strong> (文件型)、<strong>Redis</strong> (Key-Value)、<strong>Cassandra</strong> (Column-Oriented)、<strong>Neo4j</strong> (圖形型)</p></div><h2 id="比較"><a href="#比較" class="headerlink" title="比較"></a>比較</h2><table><thead><tr><th><strong>特性</strong></th><th><strong>SQL</strong></th><th><strong>NoSQL</strong></th></tr></thead><tbody><tr><td><strong>結構化</strong></td><td>嚴格結構，需事先定義 Schema。</td><td>無固定模式，靈活應對結構變化。</td></tr><tr><td><strong>查詢能力</strong></td><td>支持複雜查詢和跨表操作 (JOIN)。</td><td>查詢速度快，通常不支持複雜的 JOIN 操作。</td></tr><tr><td><strong>交易支持</strong></td><td>支持 ACID 交易，確保資料一致性。</td><td>通常不支持 ACID，根據需求支持 BASE 或強一致性。</td></tr><tr><td><strong>擴展性</strong></td><td>垂直擴展 (Scale-Up)，增加硬體資源。</td><td>水平擴展 (Scale-Out)，分片處理大量資料。</td></tr><tr><td><strong>適用場景</strong></td><td>資料結構穩定，要求高一致性，關聯查詢頻繁的應用。</td><td>資料結構多變，大規模、高併發的應用 (如社交網路、流量分析)。</td></tr><tr><td><strong>性能表現</strong></td><td>對<code>小型</code>資料庫表現良好，但大規模資料可能遇到瓶頸。</td><td>針對<code>大規模資料</code>設計，擁有高性能與高擴展性。</td></tr></tbody></table><h2 id="適用情境與選擇指南"><a href="#適用情境與選擇指南" class="headerlink" title="適用情境與選擇指南"></a>適用情境與選擇指南</h2><table><thead><tr><th><strong>需求類型</strong></th><th><strong>建議使用</strong></th><th><strong>原因</strong></th></tr></thead><tbody><tr><td><strong>強一致性</strong>，EX: 金融交易、銀行系統</td><td>SQL</td><td>支持 ACID 特性，確保資料一致性和完整性。</td></tr><tr><td><strong>高併發讀取</strong>，EX: 社交媒體平台</td><td>NoSQL (鍵值或文件型)</td><td>分布式架構能有效處理高併發，Key-Value 適合快速讀寫需求。</td></tr><tr><td><strong>頻繁關聯查詢</strong>，EX: ERP 系統</td><td>SQL</td><td>支持 JOIN 和複雜查詢操作。</td></tr><tr><td><strong>快速變化的資料結構</strong>，如物聯網數據分析</td><td>NoSQL (文件型)</td><td>資料結構靈活，能適應快速變化的需求。</td></tr><tr><td><strong>大規模儲存與數據分片</strong>，如分布式日誌系統</td><td>NoSQL (列式或鍵值型)</td><td>支持水平擴展和分片，適合處理大規模資料。</td></tr></tbody></table><h2 id="是否一定要選擇-NoSQL？"><a href="#是否一定要選擇-NoSQL？" class="headerlink" title="是否一定要選擇 NoSQL？"></a>是否一定要選擇 NoSQL？</h2><p>隨著應用場景的多樣化，NoSQL 的確解決了許多傳統 SQL 資料庫難以處理的問題，但它並不一定適合所有情況。如果你的應用需要強一致性或關聯查詢頻繁，SQL 仍然是最好的選擇。而對於靈活性需求高且需要處理大規模分布式數據的情況，NoSQL 則更具優勢。<br>++重要的是根據你的實際需求選擇最合適的技術，而不是盲目追求新的趨勢或工具++。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;資料的儲存與未來的選擇&quot;&gt;&lt;a href=&quot;#資料的儲存與未來的選擇&quot; class=&quot;headerlink&quot; title=&quot;資料的儲存與未來的選擇&quot;&gt;&lt;/a&gt;資料的儲存與未來的選擇&lt;/h3&gt;&lt;p&gt;現今的應用程式需要處理大量的資料，而選擇適合的資料庫相當的重要。無論是需要處理&lt;code&gt;結構化資料&lt;/code&gt;，還是&lt;code&gt;非結構化&lt;/code&gt;或&lt;code&gt;半結構化&lt;/code&gt;資料，我們通常面臨著兩種主要資料庫技術的選擇：&lt;strong&gt;關聯式資料庫 (SQL)&lt;/strong&gt; 和 &lt;strong&gt;非關聯式資料庫 (NoSQL)&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;本篇教學將以簡單明瞭的方式介紹這兩種資料庫的核心概念、結構、適用情境以及它們之間的比較，幫助你快速掌握其特性，並做出正確的選擇。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Database" scheme="https://zanazhong.github.io/tags/Database/"/>
    
    <category term="SQL" scheme="https://zanazhong.github.io/tags/SQL/"/>
    
    <category term="NoSQL" scheme="https://zanazhong.github.io/tags/NoSQL/"/>
    
    <category term="資料庫" scheme="https://zanazhong.github.io/tags/%E8%B3%87%E6%96%99%E5%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>從架構到流程：完整理解 Docker 的 component 與互動邏輯</title>
    <link href="https://zanazhong.github.io/2025/01/17/%E5%BE%9E%E6%9E%B6%E6%A7%8B%E5%88%B0%E6%B5%81%E7%A8%8B%EF%BC%9A%E5%AE%8C%E6%95%B4%E7%90%86%E8%A7%A3-Docker-%E7%9A%84-component-%E8%88%87%E4%BA%92%E5%8B%95%E9%82%8F%E8%BC%AF/"/>
    <id>https://zanazhong.github.io/2025/01/17/%E5%BE%9E%E6%9E%B6%E6%A7%8B%E5%88%B0%E6%B5%81%E7%A8%8B%EF%BC%9A%E5%AE%8C%E6%95%B4%E7%90%86%E8%A7%A3-Docker-%E7%9A%84-component-%E8%88%87%E4%BA%92%E5%8B%95%E9%82%8F%E8%BC%AF/</id>
    <published>2025-01-17T07:59:56.000Z</published>
    <updated>2025-01-17T08:46:15.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="為什麼深入了解-Docker-的內部運作很重要？"><a href="#為什麼深入了解-Docker-的內部運作很重要？" class="headerlink" title="為什麼深入了解 Docker 的內部運作很重要？"></a>為什麼深入了解 Docker 的內部運作很重要？</h2><p>Docker 是現代容器技術的基石，其方便的指令和快速的容器啟動能力，讓開發者與運維工程師能快速上手。然而，當應用程式進入生產環境，或系統遇到性能瓶頸與故障時，深入理解 Docker 的內部架構和運作流程便相當重要。</p><p>在本文教學中，我們將聚焦於 Docker 的核心組件（EX: <strong>Docker Client</strong>、<strong>Docker Daemon</strong>、<strong>Containerd</strong>、<strong>OCI Runtime</strong>…等）及其之間的互動關係，並帶你探索從下載 Image 檔到啟動 Container 的完整流程，幫助你掌握 Docker 的內部邏輯。</p><span id="more"></span><h2 id="核心組件與角色"><a href="#核心組件與角色" class="headerlink" title="核心組件與角色"></a>核心組件與角色</h2><h3 id="Docker-Client"><a href="#Docker-Client" class="headerlink" title="Docker Client"></a>Docker Client</h3><blockquote><p>用戶與 Docker 互動的入口，通過命令 (如 <code>docker run</code>、<code>docker build</code>) 向 Docker Daemon 發送請求。</p></blockquote><ul><li><strong>互動對象</strong>：與 Docker Daemon 通訊 (通常通過 REST API 或 UNIX Socket)。</li><li><strong>位置</strong>：用戶本地環境。</li></ul><h3 id="Docker-Daemon"><a href="#Docker-Daemon" class="headerlink" title="Docker Daemon"></a>Docker Daemon</h3><blockquote><p>Docker 的核心服務 process ，負責接收 Client 請求並執行具體操作，EX: 拉取 Image、創建 Container，並協調後續所有 Container 生命週期、Image 管理、網路、儲存…等工作。<br>早期 Docker Daemon 自己直接管理 Container，但後來將 Container 執行的部分抽象化給 <strong><code>Containerd</code></strong> 去處理。</p></blockquote><ul><li><strong>內部構成</strong>：<ul><li><strong>Containerd</strong>：Container 管理層，負責++管理容器的生命周期++ (EX: 啟動、停止)。</li><li><strong>Containerd-shim</strong>：中介層，確保 Container 與 Containerd 的解耦，讓 Container 在 Containerd 崩潰後仍能運行。</li><li>**OCI Runtime (EX: runc)**：執行層，負責啟動和管理容器的隔離 process 。</li></ul></li></ul><h3 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h3><blockquote><p>Image 儲存庫，用於保存和分發 Docker Image。<br>可以是 Public（EX: Docker Hub）或 Private（公司內部架設）。</p></blockquote><ul><li><strong>互動對象</strong>：Docker Daemon 通過拉取或推送操作與 Registry 互動。</li><li><strong>常見</strong>：Docker Hub、privete Registry。</li></ul><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><blockquote><p>Container 的靜態模板，包含應用程式及其運行所需的依賴和配置。</p></blockquote><ul><li><strong>特性</strong>：<ul><li>使用分層文件系統 (UnionFS)，每層代表 Image 的一部分 (EX: 基礎 OS、應用依賴)。</li><li>不可變，<strong>可以被多個容器共享</strong>。</li></ul></li><li><strong>互動對象</strong>：由 Docker Daemon 從 Registry 中拉取，並交付給 Containerd 啟動 Container。</li></ul><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><blockquote><p>Image 的運行實例，是一個輕量級、隔離的應用運行環境。</p></blockquote><ul><li><strong>運作基礎</strong>：依賴 Linux 的 Namespace 和 Cgroups 技術實現隔離與資源限制。</li><li><strong>互動對象</strong>：由 Containerd 調用 OCI Runtime 創建，並由 Containerd-shim 管理。</li></ul><h3 id="Containerd"><a href="#Containerd" class="headerlink" title="Containerd"></a>Containerd</h3><blockquote><p><strong>管理層</strong>，負責 Container 的整體生命周期管理，是 Docker Daemon 的核心子系統。</p></blockquote><ul><li><strong>功能</strong>：<ul><li>拉取與管理 Image。</li><li>創建與刪除 Container。</li><li>調用 OCI Runtime 啟動容器。</li></ul></li><li><strong>互動對象</strong>：通過 Docker Daemon 接收指令，並向 OCI Runtime 傳遞容器配置。</li></ul><h3 id="Containerd-shim"><a href="#Containerd-shim" class="headerlink" title="Containerd-shim"></a>Containerd-shim</h3><blockquote><p><strong>中介層 (中間代理)</strong> ，管理 Container 的生命周期，確保 Container 在 Containerd 崩潰後依然運行。</p></blockquote><ul><li><p><strong>功能</strong>：</p><ul><li>管理 Container 與父 process 的互動。</li></ul><ul><li>解耦作用：確保容器的執行不依賴於 Containerd 的狀態 (狀態相互獨立)。</li><li>資源管理：監控 Container 的 process 狀態。</li><li>I&#x2F;O 管理：處理 Container 的輸入&#x2F;輸出數據，方便用戶與 Container 互動。</li><li>Container 生命周期管理：處理 Container 的啟動、停止及 process 監控(不因 containerd daemon 本身的重啟而中斷)。</li></ul></li><li><p><strong>互動對象</strong>：</p><ul><li>作為 Containerd 與容器之間的橋接，解耦 Container 與 Containerd。</li><li>與底層的 OCI Runtime 溝通，啟動 Container process。</li></ul></li></ul><div class="note info"><ul><li>shim 就像是「轉接器」或「支架（shim）」的概念，一個 Container 對應一個 shim。</li><li>Container 啟動後，<code>Containerd-shim</code> 會取代 <code>Containerd</code> 成為 Container 的父 process，確保即使 <code>Containerd</code> 崩潰，Container 仍然能持續運行。</li></ul></div><h3 id="OCI-Runtime-EX-runc"><a href="#OCI-Runtime-EX-runc" class="headerlink" title="OCI Runtime (EX: runc)"></a>OCI Runtime (EX: runc)</h3><blockquote><p><strong>執行層</strong>，基於 OCI (Open Container Initiative) 規範的運行時工具，負責實際啟動 Container。</p></blockquote><ul><li><strong>功能</strong>：<ul><li>設置 Container 的++隔離環境++ (Namespace、Cgroups…等)。</li><li>啟動 Container 內的應用 process 。</li></ul></li><li><strong>互動對象</strong>：由 Containerd 呼叫，執行容器啟動的具體邏輯。</li></ul><p>最常見的 OCI Runtime 是 runc，它是 OCI Runtime 的一個具體實現，專門處理容器的低層操作。</p><h3 id="OCI-Spec-規範"><a href="#OCI-Spec-規範" class="headerlink" title="OCI Spec (規範)"></a>OCI Spec (規範)</h3><blockquote><p>一套 Container 運行時的標準規範，定義 Container 的配置文件格式和行為。</p></blockquote><ul><li><strong>功能</strong>：<ul><li>描述 Container 的資源設置 (EX: CPU、Memory)。</li><li>定義 Container 的文件系統掛載點。</li><li>設置 process 的啟動命令和參數。</li><li>配置 Namespace 隔離（EX: 網路、PID、用戶等）。</li></ul></li><li><strong>內容</strong>：<ul><li>Container 的資源配置 (EX: CPU、Memory)。</li><li>Namespace 和檔案系統的隔離規則。</li></ul></li><li><strong>主要構成</strong>：<ul><li><code>config.json</code>：定義 Container 的配置，EX: 環境變量、文件系統、資源限制。</li><li><code>runtime-spec</code>：描述 Container 的行為規範，OCI Runtime 依此實現運行時行為。</li></ul></li><li><strong>互動對象</strong>：OCI Runtime 根據 OCI Spec 配置 Container 環境。</li></ul><h2 id="運作流程"><a href="#運作流程" class="headerlink" title="運作流程"></a>運作流程</h2><p>以下是執行 <code>docker run</code> 指令的完整過程：</p><h3 id="發送指令"><a href="#發送指令" class="headerlink" title="發送指令"></a>發送指令</h3><ul><li><strong>步驟</strong>：使用者執行 <code>docker run hello-world</code>。</li><li><strong>互動對象</strong>：Docker Client 將請求發送給 Docker Daemon。</li></ul><h3 id="拉取-Image"><a href="#拉取-Image" class="headerlink" title="拉取 Image"></a>拉取 Image</h3><ul><li><strong>步驟</strong>：Docker Daemon 檢查本地是否存在 Image ，若無則從 Registry 拉取。</li><li><strong>互動對象</strong>：Docker Daemon 與 Registry 通訊，下載 Image 後存儲於本地。</li></ul><h3 id="創建-Container"><a href="#創建-Container" class="headerlink" title="創建 Container"></a>創建 Container</h3><ul><li><strong>步驟</strong>：<ol><li>Docker Daemon 通過 Containerd 請求創建容器。</li><li>Containerd 調用 OCI Runtime (如 runc)，基於 OCI Spec 配置容器環境。</li></ol></li><li><strong>互動對象</strong>：<ul><li>Docker Daemon → Containerd → OCI Runtime。</li></ul></li></ul><h3 id="啟動容器"><a href="#啟動容器" class="headerlink" title="啟動容器"></a>啟動容器</h3><ul><li><strong>步驟</strong>：<ol><li>OCI Runtime 配置命名空間、Cgroups，並啟動 Container process。</li><li>Containerd-shim 接管 Container process 的管理，與父 process 解耦。</li></ol></li><li><strong>互動對象</strong>：<ul><li>OCI Runtime → Containerd-shim。</li></ul></li></ul><h3 id="運行與管理"><a href="#運行與管理" class="headerlink" title="運行與管理"></a>運行與管理</h3><ul><li><strong>步驟</strong>：容器進入運行狀態，Docker Client 可通過命令與容器互動。</li><li><strong>互動對象</strong>：<ul><li>Docker Client → Docker Daemon → Containerd。</li></ul></li></ul><h2 id="架構圖"><a href="#架構圖" class="headerlink" title="架構圖"></a>架構圖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------------------+</span><br><span class="line">|           Docker Client           |</span><br><span class="line">+-----------------------------------+</span><br><span class="line">                  |</span><br><span class="line">                  v</span><br><span class="line">+-----------------------------------+                          +-----------------+ </span><br><span class="line">|           Docker Daemon  ---------|--(pull image if needed)-&gt;| Registry Client |</span><br><span class="line">|        +----------------+         |                          +-----------------+ </span><br><span class="line">|        |   Containerd   |         |                                    |</span><br><span class="line">|        +----------------+         |                                    v </span><br><span class="line">|                 |                 |                              +------------+</span><br><span class="line">|                 v                 |                              |  Registry  |</span><br><span class="line">|        +-----------------+        |                              +------------+</span><br><span class="line">|        | Containerd-shim |        |</span><br><span class="line">|        +-----------------+        |</span><br><span class="line">|                 |                 |</span><br><span class="line">|                 v                 |</span><br><span class="line">|        +-----------------+        |</span><br><span class="line">|        |   OCI Runtime   |        |</span><br><span class="line">|        +-----------------+        |</span><br><span class="line">|                 |                 |</span><br><span class="line">|                 v                 |</span><br><span class="line">|  Containers (Isolated Processes)  |</span><br><span class="line">+-----------------------------------+</span><br></pre></td></tr></table></figure><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><table><thead><tr><th><strong>組件名稱</strong></th><th><strong>作用</strong></th><th><strong>互動對象</strong></th></tr></thead><tbody><tr><td>Docker Client</td><td>接收用戶指令，發送給 Docker Daemon</td><td>Docker Daemon</td></tr><tr><td>Docker Daemon</td><td>管理 Container 的核心服務，處理 Image 與 Container 操作</td><td>Docker Client、Registry、Containerd</td></tr><tr><td>Registry</td><td>儲存與分發 Image</td><td>Docker Daemon</td></tr><tr><td>Image</td><td>Container 的靜態模板</td><td>Docker Daemon</td></tr><tr><td>Container</td><td>Image 的運行實例</td><td>Containerd</td></tr><tr><td>Containerd</td><td>管理 Container 的生命周期</td><td>Docker Daemon、OCI Runtime</td></tr><tr><td>Containerd-shim</td><td>確保 Container 與 Containerd 解耦</td><td>Containerd、Container、OCI Runtime</td></tr><tr><td>OCI Runtime (runc)</td><td>實際執行Container</td><td>Containerd、作業系統</td></tr><tr><td>OCI Spec</td><td>Container 配置的標準規範</td><td>OCI Runtime</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;為什麼深入了解-Docker-的內部運作很重要？&quot;&gt;&lt;a href=&quot;#為什麼深入了解-Docker-的內部運作很重要？&quot; class=&quot;headerlink&quot; title=&quot;為什麼深入了解 Docker 的內部運作很重要？&quot;&gt;&lt;/a&gt;為什麼深入了解 Docker 的內部運作很重要？&lt;/h2&gt;&lt;p&gt;Docker 是現代容器技術的基石，其方便的指令和快速的容器啟動能力，讓開發者與運維工程師能快速上手。然而，當應用程式進入生產環境，或系統遇到性能瓶頸與故障時，深入理解 Docker 的內部架構和運作流程便相當重要。&lt;/p&gt;
&lt;p&gt;在本文教學中，我們將聚焦於 Docker 的核心組件（EX: &lt;strong&gt;Docker Client&lt;/strong&gt;、&lt;strong&gt;Docker Daemon&lt;/strong&gt;、&lt;strong&gt;Containerd&lt;/strong&gt;、&lt;strong&gt;OCI Runtime&lt;/strong&gt;…等）及其之間的互動關係，並帶你探索從下載 Image 檔到啟動 Container 的完整流程，幫助你掌握 Docker 的內部邏輯。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Docker" scheme="https://zanazhong.github.io/tags/Docker/"/>
    
    <category term="Containerd" scheme="https://zanazhong.github.io/tags/Containerd/"/>
    
    <category term="OCI" scheme="https://zanazhong.github.io/tags/OCI/"/>
    
    <category term="Architecture" scheme="https://zanazhong.github.io/tags/Architecture/"/>
    
    <category term="基礎架構" scheme="https://zanazhong.github.io/tags/%E5%9F%BA%E7%A4%8E%E6%9E%B6%E6%A7%8B/"/>
    
    <category term="容器化技術" scheme="https://zanazhong.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E8%A1%93/"/>
    
  </entry>
  
  <entry>
    <title>深入淺出理解 Docker 的底層運作與架</title>
    <link href="https://zanazhong.github.io/2025/01/16/%E6%B7%B1%E5%85%A5%E6%B7%BA%E5%87%BA%E7%90%86%E8%A7%A3-Docker-%E7%9A%84%E5%BA%95%E5%B1%A4%E9%81%8B%E4%BD%9C%E8%88%87%E6%9E%B6/"/>
    <id>https://zanazhong.github.io/2025/01/16/%E6%B7%B1%E5%85%A5%E6%B7%BA%E5%87%BA%E7%90%86%E8%A7%A3-Docker-%E7%9A%84%E5%BA%95%E5%B1%A4%E9%81%8B%E4%BD%9C%E8%88%87%E6%9E%B6/</id>
    <published>2025-01-16T07:07:49.000Z</published>
    <updated>2025-01-21T06:11:36.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-是什麼？"><a href="#Docker-是什麼？" class="headerlink" title="Docker 是什麼？"></a>Docker 是什麼？</h2><p>Docker 是現代開發與運維中不可或缺的工具、是一種容器化技術，用來打包、部署和運行應用程式。它讓你能在任何環境中快速部署應用，實現「一次構建，隨處運行」的目標。</p><span id="more"></span><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>要理解 Docker 的運作，我們需要先了解幾個核心概念：</p><ul><li><p><strong>Image</strong>：</p><ul><li>應用服務的靜態模板，包含應用程式 (Application) 及其運行所需的相依性資源 (Dependency) (EX: 程式碼、程式庫)。<blockquote><p>Dependency: 官方以 bins&#x2F; libs 稱之，為二進位執行檔 binaries &amp; 函式庫 libraries</p></blockquote></li><li>類似於 VM 中的「快照」(Snapeshot)。</li></ul></li><li><p><strong>Container</strong>：</p><ul><li>從 Image 啟動的執行實例，是一個輕量的隔離運行環境。</li><li>每個容器共享宿主機的作業系統核心，但彼此隔離。</li></ul></li><li><p><strong>Registry</strong>：</p><ul><li>儲存和分發 Image 的地方 (EX: Docker Hub or Private Registry)。</li></ul></li></ul><h2 id="底層技術"><a href="#底層技術" class="headerlink" title="底層技術"></a>底層技術</h2><blockquote><p>Docker 的強大主要依賴於 Linux 的核心功能</p></blockquote><ul><li><p><strong>Namespace</strong></p><ul><li>用於實現 Container 的 <strong>process 隔離</strong>。</li><li>每個 Container 都有自己的命名空間，確保不同容器間的資源互不影響。</li><li>常見的 Namespace：<ul><li>**PID (進程 ID)**：每個容器看到的是自己的進程列表。</li><li>**NET (網路)**：每個容器擁有自己的網路接口和 IP。</li><li>**MNT (掛載)**：每個容器有自己的檔案系統視圖。</li></ul></li></ul></li><li><p><strong>Cgroups</strong></p><ul><li>用於實現資源管理和限制，EX: CPU、記憶體和網路。</li><li>防止單一容器佔用過多資源，影響整體系統性能。</li></ul></li><li><p><strong>UnionFS</strong></p><ul><li>支援分層的檔案系統，++減少重複存儲的數據量++。</li><li>Docker 的 Image 由多層構成，每層只存儲新增或修改的部分，未改變的部分會繼續共享。</li></ul></li><li><p><strong>Container Runtime</strong></p><ul><li>Docker 使用 <strong>containerd</strong> 作為 Container Runtime，負責管理 Container 的生命周期 (啟動、停止、刪除)。</li></ul></li></ul><h2 id="核心架構"><a href="#核心架構" class="headerlink" title="核心架構"></a>核心架構</h2><ul><li><p><strong>Docker Client</strong>：</p><ul><li>用戶與 Docker 互動的介面，接受指令 (EX: <code>docker run</code>)</li><li>將請求發送給 Docker Daemon。</li></ul></li><li><p><strong>Docker Daemon</strong>：</p><ul><li>Docker 的核心，負責處理容器操作 (EX: 啟動、停止)以及管理 Image 和網絡等資源。</li><li>持續運行，並++監聽來自 Docker Client 的請求++。</li></ul></li><li><p><strong>Docker Registry</strong>：</p><ul><li>儲存與分發 Image 。</li><li>默認為 Docker Hub，但也可以自行建立。</li></ul></li><li><p><strong>Containerd</strong>：</p><ul><li>Container 的核心執行環境，管理容器的生命周期。</li></ul></li><li><p>**OCI Runtime (Open Container Initiative)**：</p><ul><li>標準化的 Container Runtime (EX: runc)，負責真正啟動和運行容器。</li></ul></li></ul><p><img src="https://hackmd.io/_uploads/H1Hyw48Dkg.jpg" alt="docker_architecture"></p><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>假設執行以下指令：<code>docker run hello-world</code></p><ol><li><p><strong>查找 Image</strong>：</p><ul><li>Docker Client 發送請求到 Docker Daemon。</li><li>Daemon 會先在本地檢查是否存在 <code>hello-world</code> Image，沒有則從 Docker Hub 拉取。</li></ul></li><li><p><strong>啟動容器</strong>：</p><ul><li>使用下載的 Image 創建容器。</li><li>分配資源 (EX: CPU、Memory)並設置 Namespace。</li></ul></li><li><p><strong>運行應用程式</strong>：</p><ul><li>啟動容器中的應用程式。</li><li>使用者可以通過容器內的網路端口與應用程式互動。</li></ul></li></ol><h2 id="應用場景"><a href="#應用場景" class="headerlink" title="應用場景"></a>應用場景</h2><ul><li><p><strong>開發環境一致性</strong>：<br> 開發人員可以在本地運行與生產環境完全一致的環境，避免「在我這能跑」的問題。</p></li><li><p><strong>CI&#x2F;CD 流程</strong>：<br> 快速打包、測試和部署應用程式，大幅縮短交付周期。</p></li><li><p><strong>微服務架構</strong>：<br> 每個微服務打包成獨立的容器，實現高效管理和擴展。</p></li></ul><h2 id="優缺點"><a href="#優缺點" class="headerlink" title="優缺點"></a>優缺點</h2><table><thead><tr><th><strong>優點</strong></th><th><strong>缺點</strong></th></tr></thead><tbody><tr><td>輕量級：共享 OS 核心，減少資源需求</td><td>容器隔離性不如虛擬機 (需注意安全設置)</td></tr><tr><td>啟動速度快：秒級啟動，提升開發效率</td><td>高效管理需要學習曲線 (如編排工具 Kubernetes)</td></tr><tr><td>高可移植性：支援跨平台部署</td><td>大量容器可能增加監控和調試的複雜度</td></tr></tbody></table><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Docker 通過整合 Linux 的 Namespace、Cgroups 和 UnionFS，提供了一個輕量且高效的容器化平台。它的設計理念簡單，但底層運作機制複雜且高效，是現代軟體開發與部署的核心工具。</p><div class="note info"><p>Docker 是容器技術的橋梁、是一種輕量虛擬化技術，讓你的應用程式無縫運行在任何環境中！</p></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Docker-是什麼？&quot;&gt;&lt;a href=&quot;#Docker-是什麼？&quot; class=&quot;headerlink&quot; title=&quot;Docker 是什麼？&quot;&gt;&lt;/a&gt;Docker 是什麼？&lt;/h2&gt;&lt;p&gt;Docker 是現代開發與運維中不可或缺的工具、是一種容器化技術，用來打包、部署和運行應用程式。它讓你能在任何環境中快速部署應用，實現「一次構建，隨處運行」的目標。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Docker" scheme="https://zanazhong.github.io/tags/Docker/"/>
    
    <category term="Architecture" scheme="https://zanazhong.github.io/tags/Architecture/"/>
    
    <category term="基礎架構" scheme="https://zanazhong.github.io/tags/%E5%9F%BA%E7%A4%8E%E6%9E%B6%E6%A7%8B/"/>
    
    <category term="容器化技術" scheme="https://zanazhong.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E8%A1%93/"/>
    
    <category term="Linux" scheme="https://zanazhong.github.io/tags/Linux/"/>
    
    <category term="Namespace" scheme="https://zanazhong.github.io/tags/Namespace/"/>
    
    <category term="Cgroups" scheme="https://zanazhong.github.io/tags/Cgroups/"/>
    
    <category term="UnionFS" scheme="https://zanazhong.github.io/tags/UnionFS/"/>
    
  </entry>
  
  <entry>
    <title>單體架構 vs 微服務架構：選擇的關鍵與應用</title>
    <link href="https://zanazhong.github.io/2025/01/15/%E7%AD%86%E8%A8%98-%E5%96%AE%E9%AB%94%E6%9E%B6%E6%A7%8B-vs-%E5%BE%AE%E6%9C%8D%E5%8B%99%E6%9E%B6%E6%A7%8B%EF%BC%9A%E9%81%B8%E6%93%87%E7%9A%84%E9%97%9C%E9%8D%B5%E8%88%87%E6%87%89%E7%94%A8/"/>
    <id>https://zanazhong.github.io/2025/01/15/%E7%AD%86%E8%A8%98-%E5%96%AE%E9%AB%94%E6%9E%B6%E6%A7%8B-vs-%E5%BE%AE%E6%9C%8D%E5%8B%99%E6%9E%B6%E6%A7%8B%EF%BC%9A%E9%81%B8%E6%93%87%E7%9A%84%E9%97%9C%E9%8D%B5%E8%88%87%E6%87%89%E7%94%A8/</id>
    <published>2025-01-15T13:52:44.000Z</published>
    <updated>2025-01-15T14:30:51.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="為什麼要了解單體架構和微服務架構？"><a href="#為什麼要了解單體架構和微服務架構？" class="headerlink" title="為什麼要了解單體架構和微服務架構？"></a>為什麼要了解單體架構和微服務架構？</h2><p>隨著技術的快速發展，軟體架構設計已經成為每個工程師必須掌握的核心知識之一。<br>無論你是正在開發新產品的初創團隊，還是維護大型系統的資深工程師，選擇適合的架構直接影響系統的穩定性、性能和團隊效率。</p><p>然而，對於剛接觸架構設計的初學者來說，「單體架構」與「微服務架構」之間的選擇常常令人困惑：</p><ul><li>單體架構似乎簡單直接，但為什麼大家都在討論微服務？</li><li>微服務聽起來很先進，但是否真的適合所有場景？</li><li>團隊是否一定要採用最新技術，才能保持競爭力？</li></ul><span id="more"></span><h2 id="單體架構-Monolithic-是什麼？"><a href="#單體架構-Monolithic-是什麼？" class="headerlink" title="單體架構 (Monolithic) 是什麼？"></a>單體架構 (Monolithic) 是什麼？</h2><p>Monolithic 是傳統的軟體設計方式，將應用程式的所有功能打包在一個整體中。</p><ul><li>所有功能模組共享同一個代碼庫和部署單位。</li><li>通常包含三層結構：UI 層、業務邏輯層、數據層。</li></ul><p><strong>優點</strong>：</p><ul><li><strong>簡單性</strong>：適合小型或初期專案，開發與部署流程直觀。</li><li><strong>性能好</strong>：內部調用通常比分布式架構更快。</li><li><strong>工具支援廣</strong>：不需要額外的運行時環境管理 (例如 Kubernetes)。</li></ul><p><strong>缺點</strong>：</p><ul><li><strong>耦合性高</strong>：修改或新增功能可能影響整體應用。</li><li><strong>難以擴展</strong>：所有功能部署在一起，無法針對單一模組進行擴展。</li><li><strong>可靠性低</strong>：一個模組出問題，可能導致整個應用崩潰。</li></ul><h2 id="微服務架構-Microservices-是什麼？"><a href="#微服務架構-Microservices-是什麼？" class="headerlink" title="微服務架構 (Microservices) 是什麼？"></a>微服務架構 (Microservices) 是什麼？</h2><p>Microservices 將應用拆分成一系列獨立的服務，每個服務負責一個特定的功能或業務邏輯。</p><ul><li>每個服務都可以獨立開發、部署和維護。</li><li>服務之間通過 API (例如 REST 或 gRPC) 進行通信。</li></ul><p><strong>優點</strong>：</p><ul><li><strong>高擴展性</strong>：可以針對流量高的服務單獨擴展 (如用戶認證服務)。</li><li><strong>高可用性</strong>：單個服務故障不會影響整體系統。</li><li><strong>靈活開發</strong>：不同團隊可以用不同技術棧構建自己的服務。</li></ul><p><strong>缺點</strong>：</p><ul><li><strong>複雜性增加</strong>：服務之間的通信、數據一致性和分布式監控變得更困難。</li><li><strong>部署挑戰</strong>：需要配合容器化 (Docker)、編排工具 (Kubernetes) 和 CI&#x2F;CD 管線。</li><li><strong>運營成本高</strong>：需要專門的基礎設施和人員來維護。</li></ul><h2 id="單體架構一定要轉成微服務嗎？"><a href="#單體架構一定要轉成微服務嗎？" class="headerlink" title="單體架構一定要轉成微服務嗎？"></a>單體架構一定要轉成微服務嗎？</h2><p>不一定！選擇架構應根據業務需求和資源狀況，而非追求潮流。</p><p><strong>應該轉為 Microservices 的情境</strong>：</p><ol><li><strong>系統龐大且複雜</strong>：單體架構已經無法快速迭代和部署。</li><li><strong>流量分布不均</strong>：某些功能的流量特別高，需要獨立擴展 (例如商品查詢 vs 購物車)。</li><li><strong>團隊規模擴大</strong>：不同功能模組需要由多個團隊並行開發，避免資源衝突。</li><li><strong>多樣性需求</strong>：需要引入不同的技術或框架來滿足特定模組需求。</li></ol><p><strong>適合保留 Monolithic 的情境</strong>：</p><ol><li><strong>小型專案</strong>：團隊規模小，開發與維護的成本可控。</li><li><strong>需求穩定</strong>：業務場景簡單，功能變化不大。</li><li><strong>資源有限</strong>：運營人員、基礎設施或時間不足以支撐Microservices的高複雜度。</li></ol><h2 id="比較"><a href="#比較" class="headerlink" title="比較"></a>比較</h2><table><thead><tr><th><strong>特性</strong></th><th><strong>Monolithic</strong></th><th><strong>Microservices</strong></th></tr></thead><tbody><tr><td><strong>耦合性</strong></td><td>高</td><td>低</td></tr><tr><td><strong>開發速度</strong></td><td>快 (初期)</td><td>慢 (初期)</td></tr><tr><td><strong>部署頻率</strong></td><td>整體部署</td><td>單獨部署</td></tr><tr><td><strong>擴展方式</strong></td><td>整體擴展</td><td>單點擴展</td></tr><tr><td><strong>技術多樣性</strong></td><td>單一技術棧</td><td>支援多種技術</td></tr><tr><td><strong>可靠性</strong></td><td>低 (單點故障影響整體)</td><td>高 (服務隔離，降低故障影響範圍)</td></tr></tbody></table><h2 id="應用情境"><a href="#應用情境" class="headerlink" title="應用情境"></a>應用情境</h2><ul><li><p><strong>Monolithic</strong>：<br>適用於小型企業網站、早期 MVP 開發、簡單內部工具等。</p></li><li><p><strong>Microservices</strong>：<br>適用於電子商務平台 (如亞馬遜)、流媒體服務 (如 Netflix)、高度擴展的分布式應用。</p></li></ul><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><ul><li>Monolithic 更適合快速啟動，Microservices 則適合長期運營的大型專案。</li><li><strong>切換前的提醒</strong>：轉向 Microservices 需要全面考慮團隊技能、基礎設施、業務需求，避免「過度設計」。</li><li><strong>最佳策略</strong>：採取 <strong>分段拆解法</strong>，先從最關鍵的模組開始，逐步轉型，平衡效能與複雜度。</li></ul><div class="note info"><p>選擇架構，不是看技術有多潮，而是看它是否真正解決你的問題！<br>這不僅是一場技術選擇，也是平衡效率與效能的一場藝術</p></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;為什麼要了解單體架構和微服務架構？&quot;&gt;&lt;a href=&quot;#為什麼要了解單體架構和微服務架構？&quot; class=&quot;headerlink&quot; title=&quot;為什麼要了解單體架構和微服務架構？&quot;&gt;&lt;/a&gt;為什麼要了解單體架構和微服務架構？&lt;/h2&gt;&lt;p&gt;隨著技術的快速發展，軟體架構設計已經成為每個工程師必須掌握的核心知識之一。&lt;br&gt;無論你是正在開發新產品的初創團隊，還是維護大型系統的資深工程師，選擇適合的架構直接影響系統的穩定性、性能和團隊效率。&lt;/p&gt;
&lt;p&gt;然而，對於剛接觸架構設計的初學者來說，「單體架構」與「微服務架構」之間的選擇常常令人困惑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;單體架構似乎簡單直接，但為什麼大家都在討論微服務？&lt;/li&gt;
&lt;li&gt;微服務聽起來很先進，但是否真的適合所有場景？&lt;/li&gt;
&lt;li&gt;團隊是否一定要採用最新技術，才能保持競爭力？&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="微服務" scheme="https://zanazhong.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8B%99/"/>
    
    <category term="Monolithic" scheme="https://zanazhong.github.io/tags/Monolithic/"/>
    
    <category term="Microservices" scheme="https://zanazhong.github.io/tags/Microservices/"/>
    
    <category term="單體架構" scheme="https://zanazhong.github.io/tags/%E5%96%AE%E9%AB%94%E6%9E%B6%E6%A7%8B/"/>
    
    <category term="系統架構" scheme="https://zanazhong.github.io/tags/%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B/"/>
    
  </entry>
  
  <entry>
    <title>[筆記] 深入淺出理解 Kubernetes/ Docker/ Container/ VM 概念</title>
    <link href="https://zanazhong.github.io/2025/01/14/%E7%AD%86%E8%A8%98-Kubernetes:-Docker:-Container:-VM-%E6%A6%82%E5%BF%B5/"/>
    <id>https://zanazhong.github.io/2025/01/14/%E7%AD%86%E8%A8%98-Kubernetes:-Docker:-Container:-VM-%E6%A6%82%E5%BF%B5/</id>
    <published>2025-01-14T01:08:17.000Z</published>
    <updated>2025-01-16T10:51:54.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="為什麼需要這些技術？"><a href="#為什麼需要這些技術？" class="headerlink" title="為什麼需要這些技術？"></a>為什麼需要這些技術？</h2><p>隨著應用程式越來越複雜，我們需要更靈活、高效的方式來部署和管理它們。傳統的硬體配置已經無法滿足快速變動的需求，因此「虛擬化技術」和「容器化技術」應運而生。</p><span id="more"></span><h2 id="什麼是-VM？"><a href="#什麼是-VM？" class="headerlink" title="什麼是 VM？"></a>什麼是 VM？</h2><p>虛擬機 (Virtual Machine) 是利用虛擬化技術，虛擬化整個硬體 (Hardware) 層，把一台實體機 (Host) 分割成多個彼此獨立的環境 (Guest) &#x3D;&gt; 模擬的是［整台機器］<br>每個 VM 都有自己的作業系統 (Operating System)，並模擬硬體資源 (CPU、記憶體、網路…等)。</p><ul><li><strong>優點</strong>：<ul><li>完全隔離，安全性高。</li><li>支援多種作業系統 (Windows、Linux、Ubuntu)。</li></ul></li><li><strong>缺點</strong>：<ul><li>資源消耗較大，因為每個 VM 都需要一整套作業系統。</li><li>啟動速度較慢。</li></ul></li></ul><h2 id="什麼是容器-Container-？"><a href="#什麼是容器-Container-？" class="headerlink" title="什麼是容器 (Container)？"></a>什麼是容器 (Container)？</h2><p>容器是一種比 VM 更輕量的技術，虛擬化的作業系統層，讓應用程式及其依賴環境打包成獨立的單位來執行。它共享宿主機的作業系統核心，但彼此之間隔離。 &#x3D;&gt; 模擬的是［應用程式環境］<br>透過容器引擎 (ex: Docker、Podman)，容器可以快速啟動並執行應用程式。</p><ul><li><strong>優點</strong>：<ul><li>輕量：共享作業系統核心，減少資源需求。</li><li>啟動快速：秒級啟動，比 VM 更高效。</li><li>可移植性強：應用程式「打包一次，運行到處」。</li></ul></li><li><strong>缺點</strong>：<ul><li>相較 VM 隔離性稍弱 (取決於設定)。</li></ul></li></ul><h2 id="Docker：容器化技術的代名詞"><a href="#Docker：容器化技術的代名詞" class="headerlink" title="Docker：容器化技術的代名詞"></a>Docker：容器化技術的代名詞</h2><p>Docker 是一種用於建立、部署和運行容器的開放平台。<br>將應用程式及其依賴項打包在輕量級的容器中，確保一致性和移植性。</p><ul><li><strong>核心概念</strong>：<ul><li><strong>Image</strong> (映像檔)：容器的靜態模板。</li><li><strong>Container</strong> (容器)：從映像檔啟動的執行實例。</li><li><strong>Registry</strong> (註冊伺服器)：儲存與分發映像檔的倉庫 (如 Docker Hub)。</li></ul></li><li><strong>實用場景</strong>：<ul><li>在本地開發環境中模擬多服務架構。</li><li>快速測試和部署應用程式。</li></ul></li></ul><h2 id="Kubernetes-K8s-：容器的指揮官"><a href="#Kubernetes-K8s-：容器的指揮官" class="headerlink" title="Kubernetes (K8s)：容器的指揮官"></a>Kubernetes (K8s)：容器的指揮官</h2><p>K8s 是管理容器 (ex: 調度、擴容、故障恢復) 的開源平台，專為大規模分散式系統設計。</p><ul><li><strong>主要功能</strong>：<ul><li><strong>自動化部署</strong>：根據定義文件部署應用。</li><li><strong>資源調度</strong>：動態分配計算資源。</li><li><strong>彈性伸縮</strong>：根據負載自動擴展或縮減容器數量。</li><li><strong>服務發現</strong>：為應用程式提供內建的 DNS 支援。</li></ul></li><li><strong>實用場景</strong>：<ul><li>微服務架構 (Microservices) 中管理數百甚至數千個容器。</li><li>高流量應用需要動態擴展。</li></ul></li></ul><h2 id="比較"><a href="#比較" class="headerlink" title="比較"></a>比較</h2><table><thead><tr><th><strong>特性</strong></th><th><strong>Kubernetes</strong></th><th><strong>Docker</strong></th><th><strong>虛擬機 (VM)</strong></th></tr></thead><tbody><tr><td><strong>管理對象</strong></td><td>容器 (集群層級管理)</td><td>容器 (單機層級管理)</td><td>整個操作系統</td></tr><tr><td><strong>隔離層級</strong></td><td>基於容器與命名空間(Namespace)</td><td>基於容器與命名空間(Namespace)</td><td>基於虛擬硬體</td></tr><tr><td><strong>隔離性</strong></td><td>N&#x2F;A (管理工具)</td><td>中</td><td>高</td></tr><tr><td><strong>資源效率</strong></td><td>輕量級 (容器共享同一內核)</td><td>輕量級 (容器共享同一內核)</td><td>重量級 (每個)VM 有獨立的內核)</td></tr><tr><td><strong>啟動速度</strong></td><td>快 (秒級)</td><td>快 (秒級)</td><td>慢 (分鐘級)</td></tr><tr><td><strong>運行環境的靈活性</strong></td><td>高 (容器自動調度與管理)</td><td>中 (單機或簡單的容器編排)</td><td>低 (操作系統層級管理)</td></tr><tr><td><strong>工具</strong></td><td>Kubernetes</td><td>Docker</td><td>VirtualBox、VMware</td></tr></tbody></table><h2 id="應用情境"><a href="#應用情境" class="headerlink" title="應用情境"></a>應用情境</h2><ul><li><strong>虛擬機</strong><br>當你需要在單台硬體上跑多個不同作業系統的應用 (ex:  Windows + Linux)。</li><li><strong>容器</strong><br>部署輕量、可攜式的微服務，適合 CI&#x2F;CD Pipline、自動化測試。</li><li><strong>Kubernetes</strong><br>大型分散式系統需要高效管理，且擁有動態流量需求的場景。</li></ul><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><ul><li>虛擬機是傳統的隔離方案，適合需要高安全性的場景。</li><li>容器則是現代化應用的主流解決方案，輕量且靈活。</li><li>Docker 是目前最受歡迎的容器化技術，提供簡單易用的工具來打包、分發和執行應用程式，讓開發與部署更加高效。</li><li>Kubernetes 是容器化技術的最佳管理工具，幫助我們在大規模維運中游刃有餘。</li></ul><div class="note info"><p>VM 是重量，Container 是輕量，Kubernetes 是管家！</p></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;為什麼需要這些技術？&quot;&gt;&lt;a href=&quot;#為什麼需要這些技術？&quot; class=&quot;headerlink&quot; title=&quot;為什麼需要這些技術？&quot;&gt;&lt;/a&gt;為什麼需要這些技術？&lt;/h2&gt;&lt;p&gt;隨著應用程式越來越複雜，我們需要更靈活、高效的方式來部署和管理它們。傳統的硬體配置已經無法滿足快速變動的需求，因此「虛擬化技術」和「容器化技術」應運而生。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Docker" scheme="https://zanazhong.github.io/tags/Docker/"/>
    
    <category term="容器化技術" scheme="https://zanazhong.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E8%A1%93/"/>
    
    <category term="Kubernetes" scheme="https://zanazhong.github.io/tags/Kubernetes/"/>
    
    <category term="Container" scheme="https://zanazhong.github.io/tags/Container/"/>
    
    <category term="VM" scheme="https://zanazhong.github.io/tags/VM/"/>
    
    <category term="Containerized" scheme="https://zanazhong.github.io/tags/Containerized/"/>
    
    <category term="Virtualized" scheme="https://zanazhong.github.io/tags/Virtualized/"/>
    
    <category term="虛擬化" scheme="https://zanazhong.github.io/tags/%E8%99%9B%E6%93%AC%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>[筆記] Leetcode - 1913. Maximum Product Difference Between Two Pairs</title>
    <link href="https://zanazhong.github.io/2023/12/18/%E7%AD%86%E8%A8%98-1913.-Maximum-Product%20Difference-Between-Two-Pairs/"/>
    <id>https://zanazhong.github.io/2023/12/18/%E7%AD%86%E8%A8%98-1913.-Maximum-Product%20Difference-Between-Two-Pairs/</id>
    <published>2023-12-18T13:54:30.000Z</published>
    <updated>2023-12-18T13:59:41.490Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/maximum-product-difference-between-two-pairs/">https://leetcode.com/problems/maximum-product-difference-between-two-pairs/</a></p><blockquote><p>The product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d).</p><p>For example, the product difference between (5, 6) and (2, 7) is (5 * 6) - (2 * 7) &#x3D; 16.<br>Given an integer array nums, choose four distinct indices w, x, y, and z such that the product difference between pairs (nums[w], nums[x]) and (nums[y], nums[z]) is maximized.</p><p>Return the maximum such product difference.</p></blockquote><span id="more"></span><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [5,6,2,7,4]</span><br><span class="line">Output: 34</span><br><span class="line">Explanation: We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4).</span><br><span class="line">The product difference is (6 * 7) - (2 * 4) &#x3D; 34.</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [4,2,5,9,7,4,8]</span><br><span class="line">Output: 64</span><br><span class="line">Explanation: We can choose indices 3 and 6 for the first pair (9, 8) and indices 1 and 5 for the second pair (2, 4).</span><br><span class="line">The product difference is (9 * 8) - (2 * 4) &#x3D; 64.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProductDifference</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        min_num1, min_num2 = math.inf, math.inf</span><br><span class="line">        max_num1, max_num2 = -math.inf, -math.inf</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> number <span class="keyword">in</span> nums: </span><br><span class="line">            <span class="keyword">if</span> number &gt; max_num1:</span><br><span class="line">                max_num1, max_num2 = number, max_num1</span><br><span class="line">            <span class="keyword">elif</span> number &gt; max_num2:</span><br><span class="line">                max_num2 = number</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span> number &lt; min_num1:</span><br><span class="line">                min_num1, min_num2 = number, min_num1</span><br><span class="line">            <span class="keyword">elif</span> number &lt; min_num2:</span><br><span class="line">                min_num2 = number</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> max_num1 * max_num2 - min_num1 * min_num2</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-product-difference-between-two-pairs/&quot;&gt;https://leetcode.com/problems/maximum-product-difference-between-two-pairs/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d).&lt;/p&gt;
&lt;p&gt;For example, the product difference between (5, 6) and (2, 7) is (5 * 6) - (2 * 7) &amp;#x3D; 16.&lt;br&gt;Given an integer array nums, choose four distinct indices w, x, y, and z such that the product difference between pairs (nums[w], nums[x]) and (nums[y], nums[z]) is maximized.&lt;/p&gt;
&lt;p&gt;Return the maximum such product difference.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Leetcode" scheme="https://zanazhong.github.io/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://zanazhong.github.io/tags/Python/"/>
    
    <category term="Math" scheme="https://zanazhong.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>[筆記] Leetcode - 867. Transpose Matrix</title>
    <link href="https://zanazhong.github.io/2023/12/10/%E7%AD%86%E8%A8%98-Leetcode-867.-Transpose-Matrix/"/>
    <id>https://zanazhong.github.io/2023/12/10/%E7%AD%86%E8%A8%98-Leetcode-867.-Transpose-Matrix/</id>
    <published>2023-12-10T04:59:38.000Z</published>
    <updated>2023-12-18T13:59:48.680Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/transpose-matrix/">https://leetcode.com/problems/transpose-matrix/</a></p><blockquote><p>Given a 2D integer array matrix, return the transpose of matrix.</p><p>The transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix’s row and column indices.</p></blockquote><span id="more"></span><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: matrix &#x3D; [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">Output: [[1,4,7],[2,5,8],[3,6,9]]</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: matrix &#x3D; [[1,2,3],[4,5,6]]</span><br><span class="line">Output: [[1,4],[2,5],[3,6]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transpose</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span></span><br><span class="line">        result = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix[<span class="number">0</span>])):</span><br><span class="line">            new_matrix = []</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix)):</span><br><span class="line">                new_matrix.append(matrix[row][col])</span><br><span class="line"></span><br><span class="line">            result.append(new_matrix)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/transpose-matrix/&quot;&gt;https://leetcode.com/problems/transpose-matrix/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a 2D integer array matrix, return the transpose of matrix.&lt;/p&gt;
&lt;p&gt;The transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix’s row and column indices.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Leetcode" scheme="https://zanazhong.github.io/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://zanazhong.github.io/tags/Python/"/>
    
    <category term="Matrix" scheme="https://zanazhong.github.io/tags/Matrix/"/>
    
  </entry>
  
  <entry>
    <title>[筆記] Leetcode - 1903. Largest Odd Number in String</title>
    <link href="https://zanazhong.github.io/2023/12/09/%E7%AD%86%E8%A8%98-1903.-Largest-Odd%20Number-in-String/"/>
    <id>https://zanazhong.github.io/2023/12/09/%E7%AD%86%E8%A8%98-1903.-Largest-Odd%20Number-in-String/</id>
    <published>2023-12-08T22:06:42.000Z</published>
    <updated>2023-12-08T22:08:00.491Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>You are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string “” if no odd integer exists.</p></blockquote><p>A substring is a contiguous sequence of characters within a string.</p><p>Example 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: num &#x3D; &quot;52&quot;</span><br><span class="line">Output: &quot;5&quot;</span><br><span class="line">Explanation: The only non-empty substrings are &quot;5&quot;, &quot;2&quot;, and &quot;52&quot;. &quot;5&quot; is the only odd number.</span><br></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: num &#x3D; &quot;4206&quot;</span><br><span class="line">Output: &quot;&quot;</span><br><span class="line">Explanation: There are no odd numbers in &quot;4206&quot;.</span><br></pre></td></tr></table></figure><p>Example 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: num &#x3D; &quot;35427&quot;</span><br><span class="line">Output: &quot;35427&quot;</span><br><span class="line">Explanation: &quot;35427&quot; is already an odd number.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestOddNumber</span>(<span class="params">self, num: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num) - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(num[i]) % <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> num[:i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;You are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-</summary>
      
    
    
    
    
    <category term="list" scheme="https://zanazhong.github.io/tags/list/"/>
    
    <category term="Leetcode" scheme="https://zanazhong.github.io/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://zanazhong.github.io/tags/Python/"/>
    
    <category term="reverse" scheme="https://zanazhong.github.io/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>[筆記] Leetcode - 1716. Calculate Money in Leetcode Bank</title>
    <link href="https://zanazhong.github.io/2023/12/07/%E7%AD%86%E8%A8%98-Leetcode-%201716.-Calculate%20Money-in%20Leetcode-Bank/"/>
    <id>https://zanazhong.github.io/2023/12/07/%E7%AD%86%E8%A8%98-Leetcode-%201716.-Calculate%20Money-in%20Leetcode-Bank/</id>
    <published>2023-12-07T10:58:59.000Z</published>
    <updated>2023-12-07T11:01:47.628Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/calculate-money-in-leetcode-bank">https://leetcode.com/problems/calculate-money-in-leetcode-bank</a></p><blockquote><p>Hercy wants to save money for his first car. He puts money in the Leetcode bank every day.</p></blockquote><p>He starts by putting in $1 on Monday, the first day. Every day from Tuesday to Sunday, he will put in $1 more than the day before. On every subsequent Monday, he will put in $1 more than the previous Monday.<br>Given n, return the total amount of money he will have in the Leetcode bank at the end of the nth day.</p><p><img src="https://hackmd.io/_uploads/HJQMMQkL6.png" alt="image"></p><span id="more"></span><blockquote><p>key: 總和用上底加下底乘高除二計算，再加上剩餘天數</p></blockquote><p>第一週: 1 + 2 + 3 + 4 + 5 + 6 + 7 &#x3D; 28<br>第二週: 2 + 3 + 4 + 5 + 6 + 7 + 8 &#x3D; 28 + 7<br>第三週為: 3 + 4 + 5 + 6 + 7 + 8 + 9 &#x3D; 28 + 7 x 2<br>.<br>.<br>.<br>N 週過去，總金額為: 28 + (28 + 7) + (28 + 7 × 2) + …… + [28 + 7 × (N - 1)]</p><p>{[28 + 28 + 7(N - 1)] × R} ÷ 2 </p><p>最後記得加上不滿週的天數: (N + 1) + (N + 2) + … + (N + D)<br>[(N + 1) + (N + D)] x D ÷ 2 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">totalMoney</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        week, day = <span class="built_in">divmod</span>(n, <span class="number">7</span>)</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">28</span> + <span class="number">28</span> + <span class="number">7</span> * (week - <span class="number">1</span>)) * week // <span class="number">2</span> + (week * <span class="number">2</span> + day + <span class="number">1</span>) * day // <span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/calculate-money-in-leetcode-bank&quot;&gt;https://leetcode.com/problems/calculate-money-in-leetcode-bank&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hercy wants to save money for his first car. He puts money in the Leetcode bank every day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He starts by putting in $1 on Monday, the first day. Every day from Tuesday to Sunday, he will put in $1 more than the day before. On every subsequent Monday, he will put in $1 more than the previous Monday.&lt;br&gt;Given n, return the total amount of money he will have in the Leetcode bank at the end of the nth day.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hackmd.io/_uploads/HJQMMQkL6.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Leetcode" scheme="https://zanazhong.github.io/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://zanazhong.github.io/tags/Python/"/>
    
    <category term="Math" scheme="https://zanazhong.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>[筆記] Leetcode - 905. Sort Array By Parity</title>
    <link href="https://zanazhong.github.io/2023/09/29/%E7%AD%86%E8%A8%98-Leetcode-%20905.-Sort-Array-By-Parity/"/>
    <id>https://zanazhong.github.io/2023/09/29/%E7%AD%86%E8%A8%98-Leetcode-%20905.-Sort-Array-By-Parity/</id>
    <published>2023-09-28T23:25:49.000Z</published>
    <updated>2023-09-28T23:28:02.406Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/contains-duplicate/">https://leetcode.com/problems/contains-duplicate/</a></p><blockquote><p>Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.<br>Return any array that satisfies this condition.</p></blockquote><p><img src="https://hackmd.io/_uploads/SJBmot7lp.png"></p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortArrayByParity</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt; right: </span><br><span class="line">            <span class="keyword">if</span> nums[right] % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">and</span> nums[left] % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                nums[right], nums[left] = nums[left], nums[right]</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> nums[left] % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> nums[right] % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortArrayByParity</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span>        even_idx = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                nums[even_idx], nums[i] = nums[i], nums[even_idx]</span><br><span class="line">                even_idx += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/contains-duplicate/&quot;&gt;https://leetcode.com/problems/contains-duplicate/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.&lt;br&gt;Return any array that satisfies this condition.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://hackmd.io/_uploads/SJBmot7lp.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="list" scheme="https://zanazhong.github.io/tags/list/"/>
    
    <category term="Leetcode" scheme="https://zanazhong.github.io/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://zanazhong.github.io/tags/Python/"/>
    
    <category term="Coding" scheme="https://zanazhong.github.io/tags/Coding/"/>
    
    <category term="two pointer" scheme="https://zanazhong.github.io/tags/two-pointer/"/>
    
  </entry>
  
  <entry>
    <title>[筆記] Leetcode - 217. Contains Duplicate</title>
    <link href="https://zanazhong.github.io/2023/09/28/%E7%AD%86%E8%A8%98-Leetcode-%20217.-Contains-Duplicate/"/>
    <id>https://zanazhong.github.io/2023/09/28/%E7%AD%86%E8%A8%98-Leetcode-%20217.-Contains-Duplicate/</id>
    <published>2023-09-28T12:20:56.000Z</published>
    <updated>2023-09-28T12:28:21.207Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/contains-duplicate/">https://leetcode.com/problems/contains-duplicate/</a></p><blockquote><p>Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.</p></blockquote><p><img src="https://hackmd.io/_uploads/H1SgWl7ga.png"></p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsDuplicate</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        ans = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> num <span class="keyword">in</span> ans:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans[num] = <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsDuplicate</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        ans = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> ans.get(num):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans[num] = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsDuplicate</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(nums) != <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(nums)))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/contains-duplicate/&quot;&gt;https://leetcode.com/problems/contains-duplicate/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://hackmd.io/_uploads/H1SgWl7ga.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="list" scheme="https://zanazhong.github.io/tags/list/"/>
    
    <category term="Leetcode" scheme="https://zanazhong.github.io/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://zanazhong.github.io/tags/Python/"/>
    
    <category term="Coding" scheme="https://zanazhong.github.io/tags/Coding/"/>
    
    <category term="set" scheme="https://zanazhong.github.io/tags/set/"/>
    
  </entry>
  
  <entry>
    <title>[筆記] Leetcode - 136. Single Number</title>
    <link href="https://zanazhong.github.io/2023/09/28/%E7%AD%86%E8%A8%98-Leetcode-%20136.-Single%20Number/"/>
    <id>https://zanazhong.github.io/2023/09/28/%E7%AD%86%E8%A8%98-Leetcode-%20136.-Single%20Number/</id>
    <published>2023-09-28T10:50:09.000Z</published>
    <updated>2023-09-28T10:58:42.813Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/single-number/">https://leetcode.com/problems/single-number/</a></p><blockquote><p>Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.<br>You must implement a solution with a linear runtime complexity and use only constant extra space.</p></blockquote><p><img src="https://hackmd.io/_uploads/BJfpj0Mx6.png"></p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="built_in">list</span> = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">                <span class="built_in">list</span>.remove(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">list</span>.append(i)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>.pop()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/single-number/&quot;&gt;https://leetcode.com/problems/single-number/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.&lt;br&gt;You must implement a solution with a linear runtime complexity and use only constant extra space.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://hackmd.io/_uploads/BJfpj0Mx6.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="list" scheme="https://zanazhong.github.io/tags/list/"/>
    
    <category term="Leetcode" scheme="https://zanazhong.github.io/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://zanazhong.github.io/tags/Python/"/>
    
    <category term="Coding" scheme="https://zanazhong.github.io/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>[筆記] Leetcode - 56. Merge Intervals</title>
    <link href="https://zanazhong.github.io/2023/09/05/%E7%AD%86%E8%A8%98-Leetcode-%2056.-Merge%20Intervals/"/>
    <id>https://zanazhong.github.io/2023/09/05/%E7%AD%86%E8%A8%98-Leetcode-%2056.-Merge%20Intervals/</id>
    <published>2023-09-05T09:58:43.000Z</published>
    <updated>2023-09-05T10:10:57.348Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/merge-intervals/">https://leetcode.com/problems/merge-intervals/</a></p><p><img src="https://i.imgur.com/FaQwh8J.png"><br>It means each list in intervals is a range, just to merge the overlapping one, others stay the same.</p><span id="more"></span><p>解題:</p><ol><li>sort</li></ol><p>sort by the start of each range<br>save the first one in result<br>if any the start of each range smaller then the last item in result, it should be merged, otherwise append in result</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">self, intervals</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type intervals: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># internals.sort(key = lambda x = x[0])</span></span><br><span class="line">        sort_intervals = <span class="built_in">sorted</span>(intervals, key = <span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        res = [sort_intervals[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> start, end <span class="keyword">in</span> sort_intervals[<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">if</span> res[-<span class="number">1</span>][<span class="number">1</span>] &gt;= start:</span><br><span class="line">                res[-<span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">max</span>(res[-<span class="number">1</span>][<span class="number">1</span>], end)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append([start, end])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/merge-intervals/&quot;&gt;https://leetcode.com/problems/merge-intervals/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/FaQwh8J.png&quot;&gt;&lt;br&gt;It means each list in intervals is a range, just to merge the overlapping one, others stay the same.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Leetcode" scheme="https://zanazhong.github.io/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://zanazhong.github.io/tags/Python/"/>
    
    <category term="Coding" scheme="https://zanazhong.github.io/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>[筆記] Leetcode - 2215. Find the Difference of Two Arrays</title>
    <link href="https://zanazhong.github.io/2023/05/03/%E7%AD%86%E8%A8%98-Leetcode-1822-Sign-of-the-Product-of-an-Array/"/>
    <id>https://zanazhong.github.io/2023/05/03/%E7%AD%86%E8%A8%98-Leetcode-1822-Sign-of-the-Product-of-an-Array/</id>
    <published>2023-05-03T12:34:13.000Z</published>
    <updated>2023-09-05T10:07:24.952Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>Given two 0-indexed integer arrays nums1 and nums2, return a list answer of size 2 where:</p><ul><li>answer[0] is a list of all distinct integers in nums1 which are not present in nums2.</li><li>answer[1] is a list of all distinct integers in nums2 which are not present in nums1.</li></ul><p>Note that the integers in the lists may be returned in any order.</p></blockquote><p><img src="https://i.imgur.com/mN6RB67.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findDifference</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], nums2: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span></span><br><span class="line">        set1 = <span class="built_in">set</span>(nums1)</span><br><span class="line">        set2 = <span class="built_in">set</span>(nums2)</span><br><span class="line">        <span class="keyword">return</span> [ <span class="built_in">list</span>(set1 - set2), <span class="built_in">list</span>(set2 - set1)]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;blockquote&gt;
&lt;p&gt;Given two 0-indexed integer arrays nums1 and nums2, return a list answer of size 2 where:&lt;/p&gt;
&lt;ul&gt;
</summary>
      
    
    
    
    
    <category term="Leetcode" scheme="https://zanazhong.github.io/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://zanazhong.github.io/tags/Python/"/>
    
    <category term="Coding" scheme="https://zanazhong.github.io/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>[筆記] Leetcode - 1822. Sign of the Product of an Array</title>
    <link href="https://zanazhong.github.io/2023/05/02/%E7%AD%86-Leetcode-1822-Sign-of-the-Product-of-an-Array/"/>
    <id>https://zanazhong.github.io/2023/05/02/%E7%AD%86-Leetcode-1822-Sign-of-the-Product-of-an-Array/</id>
    <published>2023-05-02T10:11:37.000Z</published>
    <updated>2023-05-02T10:20:47.436Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/sign-of-the-product-of-an-array/">https://leetcode.com/problems/sign-of-the-product-of-an-array/</a></p><blockquote><p>There is a function signFunc(x) that returns:<br>1 if x is positive.<br>-1 if x is negative.<br>0 if x is equal to 0.<br>You are given an integer array nums. Let product be the product of all values in the array nums.<br>Return signFunc(product).</p></blockquote><p><img src="https://i.imgur.com/v6fBWOf.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">arraySign</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        sign = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">                sign = -sign</span><br><span class="line">        <span class="keyword">return</span> sign</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/sign-of-the-product-of-an-array/&quot;&gt;https://leetcode.com/problems/sign-of-the-product-of-an-array/&lt;/</summary>
      
    
    
    
    
    <category term="Leetcode" scheme="https://zanazhong.github.io/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://zanazhong.github.io/tags/Python/"/>
    
    <category term="Coding" scheme="https://zanazhong.github.io/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>[筆記] Leetcode - 1491. Average Salary Excluding the Minimum and Maximum Salary</title>
    <link href="https://zanazhong.github.io/2023/05/01/%E7%AD%86%E8%A8%98-Leetcode-1491-Average-Salary-Excluding-the-Minimum-and-Maximum-Salary/"/>
    <id>https://zanazhong.github.io/2023/05/01/%E7%AD%86%E8%A8%98-Leetcode-1491-Average-Salary-Excluding-the-Minimum-and-Maximum-Salary/</id>
    <published>2023-05-01T13:54:22.000Z</published>
    <updated>2023-05-02T10:20:20.150Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/average-salary-excluding-the-minimum-and-maximum-salary/">https://leetcode.com/problems/average-salary-excluding-the-minimum-and-maximum-salary/</a></p><blockquote><p>You are given an array of unique integers salary where salary[i] is the salary of the ith employee.<br>Return the average salary of employees excluding the minimum and maximum salary. Answers within 10-5 of the actual answer will be accepted.</p></blockquote><p><img src="https://i.imgur.com/uoZrJtI.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">average</span>(<span class="params">self, salary: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">float</span>:</span> </span><br><span class="line">        salary.sort()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(salary[<span class="number">1</span>:-<span class="number">1</span>]) / (<span class="built_in">len</span>(salary) - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average</span>(<span class="params">self, salary: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">float</span>:</span></span><br><span class="line">        salary.remove(<span class="built_in">min</span>(salary))</span><br><span class="line">        salary.remove(<span class="built_in">max</span>(salary))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(salary) / <span class="built_in">len</span>(salary)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average</span>(<span class="params">self, salary: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">float</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">sum</span>(salary) - <span class="built_in">min</span>(salary) - <span class="built_in">max</span>(salary)) / (<span class="built_in">len</span>(salary) - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average</span>(<span class="params">self, salary: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">float</span>:</span></span><br><span class="line">        salary.sort()</span><br><span class="line">        salary.pop(<span class="number">0</span>)</span><br><span class="line">        salary.pop()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(salary) / <span class="built_in">len</span>(salary)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/average-salary-excluding-the-minimum-and-maximum-salary/&quot;&gt;https://leetcode.com/problems/average-sa</summary>
      
    
    
    
    
    <category term="sort" scheme="https://zanazhong.github.io/tags/sort/"/>
    
    <category term="Leetcode" scheme="https://zanazhong.github.io/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://zanazhong.github.io/tags/Python/"/>
    
    <category term="Coding" scheme="https://zanazhong.github.io/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>[筆記] Hexo - 換電腦重新部署環境</title>
    <link href="https://zanazhong.github.io/2023/04/17/%E7%AD%86%E8%A8%98-Hexo-%E6%8F%9B%E9%9B%BB%E8%85%A6%E9%87%8D%E6%96%B0%E9%83%A8%E7%BD%B2%E7%92%B0%E5%A2%83/"/>
    <id>https://zanazhong.github.io/2023/04/17/%E7%AD%86%E8%A8%98-Hexo-%E6%8F%9B%E9%9B%BB%E8%85%A6%E9%87%8D%E6%96%B0%E9%83%A8%E7%BD%B2%E7%92%B0%E5%A2%83/</id>
    <published>2023-04-17T13:30:32.000Z</published>
    <updated>2023-04-17T13:36:56.045Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>換電腦後發現即使有用 time machine 做備份還是要重新部署<br>因為 push 至 github 的是已經編譯過後的檔案，所以沒有留原始檔的話，看起來應該沒救了(?)</p></blockquote><span id="more"></span><h3 id="step-1-電腦環境設定"><a href="#step-1-電腦環境設定" class="headerlink" title="step 1: 電腦環境設定"></a>step 1: 電腦環境設定</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line">node -v</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><center>   <img src="https://i.imgur.com/wNuNXtT.png" width="40%"></center><h3 id="step-2-重新建置-Hexo-環境"><a href="#step-2-重新建置-Hexo-環境" class="headerlink" title="step 2: 重新建置 Hexo 環境"></a>step 2: 重新建置 Hexo 環境</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#建立一個 blog 的資料夾 (blog_name 請自行命名~)</span><br><span class="line">hexo init blog_name  </span><br></pre></td></tr></table></figure><p>若是有其他的要安裝請參考 <a href="https://zanazhong.github.io/2020/09/11/%E7%AD%86%E8%A8%98-GitHub-pages-Hexo-%E6%90%AD%E5%BB%BA-Blog-Mac/#more">Hexo 環境安裝</a></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog_name</span><br></pre></td></tr></table></figure><h4 id="將備份的檔案複製至新的-Hexo-環境"><a href="#將備份的檔案複製至新的-Hexo-環境" class="headerlink" title="將備份的檔案複製至新的 Hexo 環境"></a>將備份的檔案複製至新的 Hexo 環境</h4><center>   <img src="https://i.imgur.com/lWLZd0F.png)" width="40%"></center><p>將除了 node_modules 跟 public 之外的檔案複製過去</p><blockquote><p>node_modules 是放一些 library 的地方，執行 npm install 時就會下載相關的 library；而 public 是放原始檔編譯後的檔案，之後部署時會再建回來</p></blockquote><h4 id="複製完執行以下指令"><a href="#複製完執行以下指令" class="headerlink" title="複製完執行以下指令"></a>複製完執行以下指令</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>可能會出現一些 Error or Warning，照著他的指示修正即可</p><h3 id="step-3-在本地端-preview-一下"><a href="#step-3-在本地端-preview-一下" class="headerlink" title="step 3: 在本地端 preview 一下"></a>step 3: 在本地端 preview 一下</h3><p>上線前還是小心謹慎一點好，先在本地檢視一下有沒有如期正常顯示，畢竟裡面已經有嘔心瀝血作品</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#透過本機的 http://localhost:<span class="number">4000</span> 查看</span><br><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure><h3 id="step-4-重新部署-gogo"><a href="#step-4-重新部署-gogo" class="headerlink" title="step 4: 重新部署 gogo"></a>step 4: 重新部署 gogo</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><h3 id="番外-部署問題"><a href="#番外-部署問題" class="headerlink" title="番外: 部署問題"></a>番外: 部署問題</h3><blockquote><p>事情有時候總是沒這麼簡單的喇!!</p></blockquote><p>看起來一般來說他給的這個網站裡面都能找到解法 ⬇️<br>Something’s wrong. Maybe you can find the solution here: %s <a href="https://hexo.io/docs/troubleshooting.html">https://hexo.io/docs/troubleshooting.html</a></p><p>分享一下我遇到的是 github Authentication Failed (身份驗證失敗)<br>解法：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 進去網站資料夾</span><br><span class="line"><span class="built_in">cd</span> blog_name</span><br><span class="line"></span><br><span class="line"># 修改 _config.yml</span><br><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure><p>將 https 方式改成用 ssh 方式</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">deploy:</span></span><br><span class="line"><span class="function">    <span class="title">type</span>: <span class="title">git</span></span></span><br><span class="line"><span class="function">    <span class="title">repo</span>: <span class="title">https</span>://<span class="title">github.com</span>/<span class="title">yourname</span>/<span class="title">yourname.github.io.git</span> -&gt; <span class="title">git</span>@<span class="title">github.com:yourname</span>/<span class="title">yourname.github.io.git</span></span></span><br><span class="line"><span class="function">    <span class="title">branch</span>: <span class="title">master</span></span></span><br></pre></td></tr></table></figure><ol><li><p>Generating a new SSH key and adding it to the ssh-agent <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">:link:</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al ~&#x2F;.ssh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>產生金鑰的過程中，會問 3 個問題，如果沒有特殊需求可以全部使用預設值(press Enter)就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 金鑰儲存的位置與檔名，預設檔名是前面所提到 id_ed25519，可以更改檔名，ex: githud_key</span><br><span class="line">Enter file in which to save the key (&#x2F;home&#x2F;username&#x2F;.ssh&#x2F;id_ed25519): [Press enter]</span><br><span class="line"></span><br><span class="line"># 詢問是否指定金鑰保護密碼，若有設定密碼的話，之後使用每次使用時，這把金鑰時就要輸入密碼，請務必牢記。之後想修改金鑰密碼的話，可以透過 ssh-keygen 來設定。</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Generating public&#x2F;private ed25519 key pair.</span><br><span class="line">Enter file in which to save the key (&#x2F;Users&#x2F;username&#x2F;.ssh&#x2F;id_ed25519):</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in &#x2F;Users&#x2F;username&#x2F;.ssh&#x2F;id_ed25519</span><br><span class="line">Your public key has been saved in &#x2F;Users&#x2F;username&#x2F;.ssh&#x2F;id_ed25519.pub</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:*************************** your_email@example.com</span><br><span class="line">The key&#39;s randomart image is:</span><br><span class="line">+--[ED25519 256]--+</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/lDCil5I.png"></p><p>設定金鑰代理</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval &quot;$(ssh-agent -s)&quot;</span><br><span class="line"># output: Agent pid <span class="number">98350</span></span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch ~/.ssh/config</span><br><span class="line">open ~/.ssh/config</span><br></pre></td></tr></table></figure><p>modify ~&#x2F;.ssh&#x2F;config</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">   AddKeysToAgent yes</span><br><span class="line">   UseKeychain yes</span><br><span class="line">   IdentityFile ~/.ssh/id_ed25519 #！如果有改名的話這邊記得改</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Add your SSH private key to the ssh-agen</span><br><span class="line">ssh-add -K ~/.ssh/id_ed25519</span><br><span class="line"># <span class="built_in">copy</span> it</span><br><span class="line">pbcopy &lt; ~/.ssh/id_ed25519.pub #！如果有改名的話這邊記得改</span><br></pre></td></tr></table></figure></li><li><p>Adding a new SSH key to your GitHub account<a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">:link:</a><br>![](<a href="https://i.imgur.com/fT8xpej.png">https://i.imgur.com/fT8xpej.png</a> &#x3D;200x)<br><img src="https://i.imgur.com/esiwR1T.png"></p><p><img src="https://i.imgur.com/8yv980c.png"></p><p>連線測試</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line"># output: Hi XXX! You’ve successfully authenticated, but GitHub does <span class="keyword">not</span> provide shell access.</span><br></pre></td></tr></table></figure></li><li><p>deploy on GitHub</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;換電腦後發現即使有用 time machine 做備份還是要重新部署&lt;br&gt;因為 push 至 github 的是已經編譯過後的檔案，所以沒有留原始檔的話，看起來應該沒救了(?)&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://zanazhong.github.io/categories/Hexo/"/>
    
    
    <category term="GitHub" scheme="https://zanazhong.github.io/tags/GitHub/"/>
    
    <category term="Hexo" scheme="https://zanazhong.github.io/tags/Hexo/"/>
    
    <category term="GitHub pages" scheme="https://zanazhong.github.io/tags/GitHub-pages/"/>
    
    <category term="Blog" scheme="https://zanazhong.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>[筆記] Check.io - Acceptable Password II</title>
    <link href="https://zanazhong.github.io/2021/05/01/%E7%AD%86%E8%A8%98-Check-io-Acceptable-Password-II/"/>
    <id>https://zanazhong.github.io/2021/05/01/%E7%AD%86%E8%A8%98-Check-io-Acceptable-Password-II/</id>
    <published>2021-05-01T13:20:28.000Z</published>
    <updated>2021-05-01T13:29:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://py.checkio.org/en/mission/acceptable-password-ii/">check.io</a> 上的題目：合格的密碼須含數字<br>此系列文章主要是自己在解題時覺得有趣的題目，記錄下來讓自己以後方便複習，有興趣的人可以參考看看</p></blockquote><span id="more"></span><h2 id="先來看看題目"><a href="#先來看看題目" class="headerlink" title="先來看看題目"></a>先來看看題目</h2><p><img src="https://i.imgur.com/PvH7bh2.png"></p><h2 id="解題步驟"><a href="#解題步驟" class="headerlink" title="解題步驟"></a>解題步驟</h2><ul><li>密碼須大於６位數</li><li>至少需包含一個數字</li></ul><h3 id="map-用法"><a href="#map-用法" class="headerlink" title="map 用法"></a>map 用法</h3><div class="note default"><p>語法： map(function: iterable) </p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">  <span class="keyword">return</span> x * x</span><br><span class="line">    </span><br><span class="line"><span class="built_in">map</span>(square, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])  <span class="comment">#Output [2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure><h3 id="any-用法"><a href="#any-用法" class="headerlink" title="any 用法"></a>any 用法</h3><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><pre><code class="python">def is_acceptable_password(password: str) -&gt; bool:    # your code here    return True if len(password) &gt; 6 and any(map(str.isdigit, password)) else False</code></pre>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://py.checkio.org/en/mission/acceptable-password-ii/&quot;&gt;check.io&lt;/a&gt; 上的題目：合格的密碼須含數字&lt;br&gt;此系列文章主要是自己在解題時覺得有趣的題目，記錄下來讓自己以後方便複習，有興趣的人可以參考看看&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Check.io" scheme="https://zanazhong.github.io/categories/Check-io/"/>
    
    <category term="python" scheme="https://zanazhong.github.io/categories/Check-io/python/"/>
    
    
    <category term="Check.io" scheme="https://zanazhong.github.io/tags/Check-io/"/>
    
    <category term="python" scheme="https://zanazhong.github.io/tags/python/"/>
    
    <category term="map" scheme="https://zanazhong.github.io/tags/map/"/>
    
    <category term="any" scheme="https://zanazhong.github.io/tags/any/"/>
    
  </entry>
  
</feed>
